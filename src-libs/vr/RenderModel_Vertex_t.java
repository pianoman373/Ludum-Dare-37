package vr;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>
 *
 * A single vertex in a render model.
 */
public class RenderModel_Vertex_t extends Structure {

    public static final int SIZE = 2 * HmdVector3_t.SIZE + Float.BYTES * 2;
    public static final int OFFSET_POSITION = 0;
    public static final int OFFSET_NORMAL = HmdVector3_t.SIZE;
    public static final int OFFSET_TEXT_COORD = OFFSET_NORMAL + HmdVector3_t.SIZE;
    /**
     * C type : HmdVector3_t
     *
     * position in meters in device space.
     */
    public HmdVector3_t vPosition;
    /**
     * C type : HmdVector3_t
     */
    public HmdVector3_t vNormal;
    /**
     * float[2]<br>
     * C type : float[2]
     */
    public float[] rfTextureCoord = new float[2];

    public RenderModel_Vertex_t() {
        super();
    }

    @Override
    protected List<?> getFieldOrder() {
        return Arrays.asList("vPosition", "vNormal", "rfTextureCoord");
    }

    /**
     * @param vPosition C type : HmdVector3_t<br>
     * @param vNormal C type : HmdVector3_t<br>
     * @param rfTextureCoord float[2]<br>
     * C type : float[2]
     */
    public RenderModel_Vertex_t(HmdVector3_t vPosition, HmdVector3_t vNormal, float rfTextureCoord[]) {
        super();
        this.vPosition = vPosition;
        this.vNormal = vNormal;
        if ((rfTextureCoord.length != this.rfTextureCoord.length)) {
            throw new IllegalArgumentException("Wrong array size !");
        }
        this.rfTextureCoord = rfTextureCoord;
    }

    public RenderModel_Vertex_t(Pointer peer) {
        super(peer);
        read();
    }

    public void toDbb(ByteBuffer buffer, int index) {
        vPosition.toDbb(buffer, index);
        vNormal.toDbb(buffer, index + HmdVector3_t.SIZE);
        IntStream.range(0, 2).forEach(i -> buffer.putFloat(index + 2 * HmdVector3_t.SIZE + i * Float.BYTES, rfTextureCoord[i]));
    }

    public static class ByReference extends RenderModel_Vertex_t implements Structure.ByReference {
    };

    public static class ByValue extends RenderModel_Vertex_t implements Structure.ByValue {
    };
}
