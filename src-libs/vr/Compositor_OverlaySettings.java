package vr;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>
 * 
 * Allows the application to customize how the overlay appears in the compositor.
 */
public class Compositor_OverlaySettings extends Structure {

    public int size;    // sizeof(Compositor_OverlaySettings)
    public byte curved, antialias;
    public float scale, distance, alpha;
    public float uOffset, vOffset, uScale, vScale;
    public float gridDivs, gridWidth, gridScale;
    /**
     * C type : HmdMatrix44_t
     */
    public HmdMatrix44_t transform;

    public Compositor_OverlaySettings() {
        super();
    }

    @Override
    protected List<?> getFieldOrder() {
        return Arrays.asList("size", "curved", "antialias", "scale", "distance", "alpha", "uOffset", "vOffset", "uScale", "vScale", "gridDivs", "gridWidth", "gridScale", "transform");
    }

    public Compositor_OverlaySettings(Pointer peer) {
        super(peer);
        read();
    }

    public static class ByReference extends Compositor_OverlaySettings implements Structure.ByReference {
    };

    public static class ByValue extends Compositor_OverlaySettings implements Structure.ByValue {
    };
}
